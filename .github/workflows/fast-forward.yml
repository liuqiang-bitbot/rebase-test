name: fast-forward
on:
  issue_comment:
    types: [created, edited]
jobs:
  fast-forward:
    # Only run if the comment contains the /fast-forward command.
    if: ${{ contains(github.event.comment.body, '/fast-forward')
            && github.event.issue.pull_request }}
    runs-on: ubuntu-latest



    steps:
      - name: Fast forwarding
        uses: sequoia-pgp/fast-forward@v1
        with:
          merge: true
          # To reduce the workflow's verbosity, use 'on-error'
          # to only post a comment when an error occurs, or 'never' to
          # never post a comment.  (In all cases the information is
          # still available in the step's summary.)
          comment: always
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}  # 使用全局环境变量
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}  # 使用全局环境变量
          IMAGE_TAG: ${{ env.IMAGE_TAG }}  # 使用全局环境变量
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-to-eks:
    needs: [ build-and-push ]
    name: Deploy to EKS
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

      - name: Configure AWS CLI for EKS
        run: |
          aws eks --region ap-southeast-1 update-kubeconfig --name bitbot-${{ env.KEY }}-eks

      - name: Update eks
        run: |
          sed -i "s|<IMAGE_PLACEHOLDER>|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" k8s.yaml

          # Apply the updated deployment configuration
          kubectl -n ${{ env.KEY }} apply -f k8s.yaml  # 使用全局环境变量 KEY
  ci_cd:
    runs-on: ubuntu-latest
    needs: fast-forward
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Trigger appropriate deployment workflow
        env:
          GH_TOKEN: ${{ github.token }}  # 设置 GH_TOKEN 环境变量
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/dev" ]]; then
            echo "Triggering deployment for dev branch"
            # 调用 dev 环境部署的 workflow
            gh workflow run deploy-main-bot-sit.yml
          elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "Triggering deployment for main branch"
            # 调用PROD 环境部署的 workflows
            gh workflow run deploy-main-bot-prod.yml
          else
            echo "This is neither the dev nor main branch. Skipping deployment."
          fi



